from __future__ import print_function
import httplib2
import os
import pandas as pd
import numpy as np


from tqdm import tqdm
from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage


####
## IMPORTANT!!!
####
# You may have to uncomment this the first time you run a new google sheet and remove the -i file.py from
# Run --> Edit Configurations --> Interpreter Options
#try:
#    import argparse
#    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
#except ImportError:
#    flags = None

# If modifying these scopes, delete your previously saved credentials
# at ~/.credentials/sheets.googleapis.com-python-quickstart.json
SCOPES = 'https://www.googleapis.com/auth/spreadsheets.readonly'
CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'Google Sheets API Python Quickstart'

def get_credentials():
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
        Credentials, the obtained credential.
    """
    home_dir = os.path.expanduser('~')
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir,
                                   'sheets.googleapis.com-python-quickstart.json')

    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else: # Needed only for compatibility with Python 2.6
            credentials = tools.run(flow, store)
        print('Storing credentials to ' + credential_path)
    return credentials


# Function that will take credentials from googlesheets and break up the sheet into dataframes QB,RB,WR,TE,K,DST.
def posDframe():
    """Shows basic usage of the Sheets API.

    Creates a Sheets API service object and prints the names and majors of
    students in a sample spreadsheet:
    https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit
    """

    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    discoveryUrl = ('https://sheets.googleapis.com/$discovery/rest?'
                    'version=v4')
    service = discovery.build('sheets', 'v4', http=http,
                              discoveryServiceUrl=discoveryUrl)

    spreadsheetId = '1VZLj2gegd6RwDmE3UYprClaGsMe91TDrNw8fsC5ZbD4'
    rangeName = 'A1:L537'
    result = service.spreadsheets().values().get(
        spreadsheetId=spreadsheetId, range=rangeName).execute()
    values = result.get('values', [])

    # Turns Googlesheet data into DataFrame and seperates just the values
    adam = pd.DataFrame(result['values'])

    return adam

def Data_clean():
    adam = posDframe()

    # Set column labels to equal values in the 1st row
    adam.columns = adam.iloc[0]
    adam = adam[1:]

    # remove columns that I do not need
    adam = adam[['player', 'team', 'position', 'Actual_Points', 'FanDuel_Salary', 'Platform_AVG', 'STD']]

    # Removes all free agents
    adam = adam[adam.team != "FA"]
    #print(len(adam))

    # Create dataframe of just QBS
    QB = adam.loc[adam['position'] == 'QB']

    # Create dataframe of just QBS
    RB = adam.loc[adam['position'] == 'RB']

    # Create dataframe of just QBS
    WR = adam.loc[adam['position'] == 'WR']

    # Create dataframe of just QBS
    TE = adam.loc[adam['position'] == 'TE']

    # Create dataframe of just QBS
    K = adam.loc[adam['position'] == 'K']

    # Create dataframe of just QBS
    DST = adam.loc[adam['position'] == 'DST']

    return (QB, RB, WR, TE , K, DST)


    # create lineup of just the top position of each player

def removeNA():
    QB, RB, WR, TE, K, DST = Data_clean()
 #   print(QB)
    QB = QB[QB.STD.str.contains("#N/A") == False]
    RB = RB[RB.STD.str.contains("#N/A") == False]
    WR = WR[WR.STD.str.contains("#N/A") == False]
    TE = TE[TE.STD.str.contains("#N/A") == False]
    K = K[K.STD.str.contains("#N/A") == False]
    DST = DST[DST.STD.str.contains("#N/A") == False]

    return (QB, RB, WR, TE , K, DST)

def Roster_cut():
    QB, RB, WR, TE, K, DST = removeNA()

    QB = QB.sort_values('Platform_AVG', ascending=False).drop_duplicates('team').sort_index()
    TE = TE.sort_values(by=['Platform_AVG'], ascending=False)

    RB = RB[RB.Platform_AVG != '0']
    WR = WR[WR.Platform_AVG != '0']
    TE = TE[TE.Platform_AVG != '0']

    return (QB, RB, WR, TE, K, DST)

def removeLowProjections():
    QB, RB, WR, TE, K, DST = Roster_cut()


    RB['Platform_AVG'] = pd.to_numeric(RB['Platform_AVG'])
    WR['Platform_AVG'] = pd.to_numeric(WR['Platform_AVG'])
    TE['Platform_AVG'] = pd.to_numeric(TE['Platform_AVG'])


    showRB = RB[~(RB['Platform_AVG'] >= 1.0)]
    showRB = showRB[['player']]
   # print(showRB)
   # print('----------------------------------------------------')
    showWR = WR[~(WR['Platform_AVG'] >= 1.0)]
    showWR = showWR[['player']]
   # print(showWR)
   # print('----------------------------------------------------')
    showTE = TE[~(TE['Platform_AVG'] >= 1.0)]
    showTE = showTE[['player']]
   # print(showTE)

    # Add user input code!
    # To say type a players name from this list to add them to the large pool
    # logic will proly be just add 1.0 to the Platform_AVG of the players the user types in



    RB = RB[~(RB['Platform_AVG'] <= 1.0)]

    WR = WR[~(WR['Platform_AVG'] <= 1.0)]

    TE = TE[~(TE['Platform_AVG'] <= 1.0)]


    return (QB, RB, WR, TE, K, DST)
def useNeededCols():
    QB, RB, WR, TE, K, DST = removeLowProjections()

    QB = QB[['player', 'Actual_Points', 'FanDuel_Salary']]
    RB = RB[['player', 'Actual_Points', 'FanDuel_Salary']]
    WR = WR[['player', 'Actual_Points', 'FanDuel_Salary']]
    TE = TE[['player', 'Actual_Points', 'FanDuel_Salary']]
    K = K[['player', 'Actual_Points', 'FanDuel_Salary']]
    DST = DST[['player', 'Actual_Points', 'FanDuel_Salary']]


    return (QB, RB, WR, TE, K, DST)
def createAllLineups():
    QB, RB, WR, TE, K, DST = useNeededCols()

    QB = QB.values.tolist()
    RB = RB.values.tolist()
    WR = WR.values.tolist()
    TE = TE.values.tolist()
    K = K.values.tolist()
    DST = DST.values.tolist()


 #   print(type(QB))
 #   print(QB)

    nrowData = None
    first = []
    second = []
    third = []
    fourth = []
    fifth = []
    sixth = []
    qb = 0
    rb = 0
    wr = 0
    te = 0
    k = 0
    dst = 0
    QBnum = len(QB)
    RBnum = len(RB)
    WRnum = len(WR)
    TEnum = len(TE)
    Knum = len(K)
    DSTnum = len(DST)

    for qb in tqdm(range(QBnum)):
 #       QBlist = QB.iloc[qb:qb+1]

        for rb in tqdm(range(0, RBnum)):

            for wr in tqdm(range(0, WRnum)):

                for te in (range(0, TEnum)):

                    for k in (range(0, Knum)):

                        for dst in (range(0, DSTnum)):


                            if (len(first) <= 1000000 and len(RB[rb:rb + 2]) == 2 and len(WR[wr:wr + 3]) == 3):
                                # Try something like this instead of append this is meant to concatenate strings
                                # slist = [some_function(elt) for elt in somelist]
                                # s = "".join(slist)
                                first.append(QB[qb:qb + 1])
                                first.append(RB[rb:rb + 2])
                                first.append(WR[wr:wr + 3])
                                first.append(TE[te:te + 1])
                                first.append(K[k:k + 1])
                                first.append(DST[dst:dst + 1])

                            elif len(first) > 10000000 <= 20000000:
                                first.append(QB[qb:qb + 1])
                                first.append(RB[rb:rb + 2])
                                first.append(WR[wr:wr + 3])
                                first.append(TE[te:te + 1])
                                first.append(K[k:k + 1])
                                first.append(DST[dst:dst + 1])

                            elif len(second) > 10000000:
                                second.append(QB[qb:qb + 1])
                                second.append(RB[rb:rb + 2])
                                second.append(WR[wr:wr + 3])
                                second.append(TE[te:te + 1])
                                second.append(K[k:k + 1])
                                second.append(DST[dst:dst + 1])
                            elif len(third) > 10000000:
                                third.append(QB[qb:qb + 1])
                                third.append(RB[rb:rb + 2])
                                third.append(WR[wr:wr + 3])
                                third.append(TE[te:te + 1])
                                third.append(K[k:k + 1])
                                third.append(DST[dst:dst + 1])
                            elif len(fourth) > 10000000:
                                fourth.append(QB[qb:qb + 1])
                                fourth.append(RB[rb:rb + 2])
                                fourth.append(WR[wr:wr + 3])
                                fourth.append(TE[te:te + 1])
                                fourth.append(K[k:k + 1])
                                fourth.append(DST[dst:dst + 1])
                            elif len(fifth) > 10000000:
                                fifth.append(QB[qb:qb + 1])
                                fifth.append(RB[rb:rb + 2])
                                fifth.append(WR[wr:wr + 3])
                                fifth.append(TE[te:te + 1])
                                fifth.append(K[k:k + 1])
                                fifth.append(DST[dst:dst + 1])

    j = 0
    lineup = first[:2]
    count = 0
    adam = 0
    guy = []
    sex = []
    stretch = []
   # floatStretch = np.array(stretch, dtype=np.float32)
   # stretch = pd.DataFrame(stretch)
    firstNUM = len(first)

    d = {}
    for i in tqdm(range(0,firstNUM, 6)):
        i += 6

        guy = first[adam:i]
        sex.append(guy)


        #   d["line" + str(j)] = first[adam:i]
        #print(guy)
        adam += 6
        #print(i)
        sum1 = float(guy[0][0][1])
        sum2 = float(guy[1][0][1])
        sum3 = float(guy[1][1][1])
        sum4 = float(guy[2][0][1])
        sum5 = float(guy[2][1][1])
        sum6 = float(guy[2][2][1])
        sum7 = float(guy[3][0][1])
        sum8 = float(guy[4][0][1])
        sum9 = float(guy[5][0][1])

        total = (sum1 + sum2 + sum3 + sum4 + sum5 + sum6 + sum7 + sum8 + sum9)

        stretch.append(float(total))


    success = (stretch.index(max(stretch)))
    print(sex[success])
#return stretch

def youngboy():
    stretch = createAllLineups()
    print(stretch)

if __name__ == '__main__':

    #get_credentials()
    posDframe()
    Data_clean()
    removeNA()
    removeLowProjections()
    Roster_cut()
    useNeededCols()
    createAllLineups()
