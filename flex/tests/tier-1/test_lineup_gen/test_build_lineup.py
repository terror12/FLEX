from glusto.core import Glusto as g
from flex.lib.connect.connect_to_sheets import SheetsConnector
from flex.lib.data_clean.fix_df import FixUpDf
from flex.lib.data_clean.remove import Remove
from flex.lib.generate_lineup.closest_to_num import ClosestToNum
from flex.lib.generate_lineup.assemble_lineup import Assemble
import pytest
import random
import numpy as np

class TestBuildLineup:

    g.add_log(g.log, filename='./logs/BuildLineupLog')

    @pytest.mark.build_lineup
    def test_closest_to_num(self, rawDataframe, print_logging, full_dataframe_prep):
        """
        This test will make sure that the closest value to the STD of 1 is being returned.
        :param rawDataframe:
        :param print_logging:
        :param full_dataframe_prep:
        :return:
        """

        g.log.info('Instantiate the positional dataframes')
        QB, RB, WR, TE, FLX, DST = full_dataframe_prep

        # Set the STD values for each position
        # TODO: Work on making this user input or autogenerated.
        QB_STD = random.randint(1, 6)
        RB_STD = random.randint(1, 6)
        RB2_STD = random.randint(1, 6)
        WR_STD = random.randint(1, 6)
        WR2_STD = random.randint(1, 6)
        WR3_STD = random.randint(1, 6)
        TE_STD = random.randint(1, 6)
        FLX_STD = random.randint(1, 6)
        DST_STD = random.randint(1, 6)

        g.log.info(QB_STD)
        g.log.info(RB_STD)
        g.log.info(RB2_STD)
        g.log.info(WR_STD)
        g.log.info(WR2_STD)
        g.log.info(WR3_STD)
        g.log.info(TE_STD)
        g.log.info(FLX_STD)
        g.log.info(DST_STD)

        # Instantiate assemble object
        assemble = Assemble()

        # Run createLineup function to create lineup based on closest to STD From the list given
        lineup = assemble.createLineup(QB, RB, WR, TE, FLX, DST, QB_STD, RB_STD, RB2_STD, WR_STD, WR2_STD, WR3_STD, TE_STD, FLX_STD, DST_STD)

        g.log.info(lineup)

        if assemble.hasValidSalary(lineup):
            g.log.info('Total Points: %s Total Salary: %s' % (lineup[9], lineup[10]))
            assert True
        else:
            g.log.info('Salary is not right')
            assert False

    @pytest.mark.build_historic
    def test_historic(self, rawDataframe, print_logging, full_dataframe_prep):
        """
        This test will make sure that the closest value to the STD of 1 is being returned.
        :param rawDataframe:
        :param print_logging:
        :param full_dataframe_prep:
        :return:
        """

        g.log.info('Instantiate the positional dataframes')
        QB, RB, WR, TE, FLX, DST = full_dataframe_prep

        # Set the STD values for each position
        # TODO: Work on making this user input or autogenerated.
        #std = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]

        winner = 0
        for i in np.arange(0, 5):

#        for i in np.arange(0, 10, 0.01):
            QB_STD = i
            RB_STD = i
            RB2_STD = i
            WR_STD = i
            WR2_STD = i
            WR3_STD = i
            TE_STD = i
            FLX_STD = i
            DST_STD = i

            g.log.info(QB_STD)
            g.log.info(RB_STD)
            g.log.info(RB2_STD)
            g.log.info(WR_STD)
            g.log.info(WR2_STD)
            g.log.info(WR3_STD)
            g.log.info(TE_STD)
            g.log.info(FLX_STD)
            g.log.info(DST_STD)

            # Instantiate assemble object
            assemble = Assemble()

            # Run createLineup function to create lineup based on closest to STD From the list given
            lineup = assemble.createLineup(QB, RB, WR, TE, FLX, DST, QB_STD, RB_STD, RB2_STD, WR_STD, WR2_STD, WR3_STD, TE_STD, FLX_STD, DST_STD)

            g.log.info(lineup)

            if assemble.hasValidSalary(lineup):
                g.log.info('Total Points: %s Total Salary: %s' % (lineup[9], lineup[10]))
                if winner == 0:
                    winner = lineup[9]
                elif lineup[9] > winner:
                    winner = lineup[9]
                    g.log.info('Winning Lineup Currently is %s' % winner)
                else:
                    g.log.info('Winning Lineup Currently is %s' % winner)
                    assert True
            else:
                g.log.info('Lineup failed salary check!!')

    @pytest.mark.current_week
    def test_Current_Week(self, rawDataframe, print_logging, full_dataframe_prep):
        """
        This test will make sure that the closest value to the STD of 1 is being returned.
        :param rawDataframe:
        :param print_logging:
        :param full_dataframe_prep:
        :return:
        """

        g.log.info('Instantiate the positional dataframes')
        QB, RB, WR, TE, FLX, DST = full_dataframe_prep

        print(QB)
        print(WR)
        print(RB)
        print(TE)
        print(FLX)
        print(DST)

        # Set the STD values for each position
        # TODO: Work on making this user input or autogenerated.
        #std = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]

        target_STD = 2.5
        QB_STD = target_STD
        RB_STD = target_STD
        RB2_STD = target_STD
        WR_STD = target_STD
        WR2_STD = target_STD
        WR3_STD = target_STD
        TE_STD = target_STD
        FLX_STD = target_STD
        DST_STD = target_STD

        g.log.info(QB_STD)
        g.log.info(RB_STD)
        g.log.info(RB2_STD)
        g.log.info(WR_STD)
        g.log.info(WR2_STD)
        g.log.info(WR3_STD)
        g.log.info(TE_STD)
        g.log.info(FLX_STD)
        g.log.info(DST_STD)

        # Instantiate assemble object
        assemble = Assemble()

        # Run createLineup function to create lineup based on closest to STD From the list given
        lineup = assemble.createLineup(QB, RB, WR, TE, FLX, DST, QB_STD, RB_STD, RB2_STD, WR_STD, WR2_STD, WR3_STD, TE_STD, FLX_STD, DST_STD)

        g.log.info(lineup)

        lineup = assemble.findBestLineup(lineup, QB, RB, WR, TE, FLX, DST, QB_STD, RB_STD, RB2_STD, WR_STD, WR2_STD, WR3_STD, TE_STD, FLX_STD, DST_STD)
        g.log.info('This is your winning lineup: \n %s' % lineup)
        if lineup:
            assert True

    @pytest.mark.track_history
    def test_track_history(self, rawDataframe, print_logging, full_dataframe_prep):
        """
        This test will make sure that the closest value to the STD of 1 is being returned.
        :param rawDataframe:
        :param print_logging:
        :param full_dataframe_prep:
        :return:
        """

        g.log.info('Instantiate the positional dataframes')
        QB, RB, WR, TE, FLX, DST = full_dataframe_prep

        # Set the STD values for each position
        # TODO: Work on making this user input or autogenerated.
        #std = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6]

#        for i in np.arange(0, 2):

        for i in np.arange(0, 10, 0.5):
            QB_STD = i
            RB_STD = i
            RB2_STD = i
            WR_STD = i
            WR2_STD = i
            WR3_STD = i
            TE_STD = i
            FLX_STD = i
            DST_STD = i

            g.log.info(QB_STD)
            g.log.info(RB_STD)
            g.log.info(RB2_STD)
            g.log.info(WR_STD)
            g.log.info(WR2_STD)
            g.log.info(WR3_STD)
            g.log.info(TE_STD)
            g.log.info(FLX_STD)
            g.log.info(DST_STD)

            # Instantiate assemble object
            assemble = Assemble()

            # Run createLineup function to create lineup based on closest to STD From the list given
            lineup = assemble.createLineup(QB, RB, WR, TE, FLX, DST, QB_STD, RB_STD, RB2_STD, WR_STD, WR2_STD, WR3_STD, TE_STD, FLX_STD, DST_STD)

            g.log.info(lineup)


            lineup = assemble.collectLineupData(lineup, QB, RB, WR, TE, FLX, DST, QB_STD, RB_STD, RB2_STD, WR_STD, WR2_STD, WR3_STD, TE_STD, FLX_STD, DST_STD)

            # if assemble.hasValidSalary(lineup):
            #     g.log.info('Total Points: %s Total Salary: %s' % (lineup[9], lineup[10]))
            #     if winner == 0:
            #         winner = lineup[9]
            #     elif lineup[9] > winner:
            #         winner = lineup[9]
            #         g.log.info('Winning Lineup Currently is %s' % winner)
            #     else:
            #         g.log.info('Winning Lineup Currently is %s' % winner)
            #         assert True
            # else:
            #     g.log.info('Lineup failed salary check!!')


            g.log.info('This is you lineup: \n %s' % lineup)
            # if lineup:
            #     assert True